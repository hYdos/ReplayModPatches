--- com/moonsworth/lunar/v1_8/mods/replaymod/restrictions/ReplayModRestrictions.java
+++ com/moonsworth/lunar/v1_8/mods/replaymod/restrictions/ReplayModRestrictions.java
@@ -1,100 +1,0 @@
-// I don't think this sees sufficient use to justify updating.
-// Especially because it's non-trivial with forge's network changes.
-// PRs welcome. Ping me if you actually used this.
-
-package com.moonsworth.lunar.v1_8.mods.replaymod.restrictions;
-
-import io.netty.buffer.Unpooled;
-import io.netty.channel.ChannelDuplexHandler;
-import io.netty.channel.ChannelFutureListener;
-import io.netty.channel.ChannelHandler;
-import net.minecraft.network.PacketBuffer;
-import org.apache.logging.log4j.Logger;
-import java.io.IOException;
-import java.util.HashMap;
-import java.util.Map;
-
-import static com.moonsworth.lunar.v1_8.mods.replaymod.core.versions.MCVer.*;
-
-import com.moonsworth.lunar.client.event.annotation.Listen;
-import com.moonsworth.lunar.client.event.impl.world.entity.player.EventPlayer;
-import com.moonsworth.lunar.client.feature.thirdparty.ThirdPartyMod;
-import com.moonsworth.lunar.client.feature.thirdparty.events.ModEnableEvent;
-import com.moonsworth.lunar.todo.Configuration;
-import com.moonsworth.lunar.todo.EventBus;
-import com.moonsworth.lunar.todo.FMLEmbeddedChannel;
-import com.moonsworth.lunar.todo.FMLOutboundHandler;
-import com.moonsworth.lunar.todo.FMLProxyPacket;
-import com.moonsworth.lunar.todo.NetworkRegistry;
-import com.moonsworth.lunar.todo.Side;
-import com.moonsworth.lunar.v1_8.mods.replaymod.core.SettingsRegistry;
-import com.moonsworth.lunar.v1_8.mods.replaymod.core.utils.Restrictions;
-
-@ThirdPartyMod(modid = ReplayModRestrictions.MOD_ID, version = "@MOD_VERSION@", acceptedMinecraftVersions = "@MC_VERSION@", acceptableRemoteVersions = "*", serverSideOnly = true, useMetadata = true)
-public class ReplayModRestrictions {
-    public static final String MOD_ID = "replaymod-restrictions";
-
-    public static Logger LOGGER;
-
-    private final SettingsRegistry settingsRegistry = new SettingsRegistry();
-    private FMLEmbeddedChannel channel;
-
-    @ThirdPartyMod.EventHandler
-    public void preInit(ModEnableEvent event) {
-        LOGGER = event.getModLog();
-
-        Configuration config = new Configuration(event.getSuggestedConfigurationFile());
-        config.load();
-        settingsRegistry.setConfiguration(config);
-
-        settingsRegistry.register(Setting.class);
-    }
-
-    @ThirdPartyMod.EventHandler
-    public void init(ModEnableEvent event) {
-        EventBus bus = FML_BUS;
-        bus.register(this);
-
-        channel = NetworkRegistry.INSTANCE.newChannel(Restrictions.PLUGIN_CHANNEL, new RestrictionsChannelHandler())
-                .get(Side.SERVER);
-    }
-
-    @ThirdPartyMod.EventHandler
-    public void postInit(ModEnableEvent event) throws IOException {
-        settingsRegistry.save(); // Save default values to disk
-    }
-
-    @ChannelHandler.Sharable
-    private static class RestrictionsChannelHandler extends ChannelDuplexHandler {
-    }
-
-    @Listen
-    public void onUserJoin(EventPlayer.PlayerLoggedInEvent event) {
-        Map<String, byte[]> restrictions = new HashMap<>();
-        if (settingsRegistry.get(Setting.NO_XRAY))
-            restrictions.put("no_xray", new byte[0]);
-        if (settingsRegistry.get(Setting.NO_NOCLIP))
-            restrictions.put("no_noclip", new byte[0]);
-        if (settingsRegistry.get(Setting.ONLY_FIRST_PERSON))
-            restrictions.put("only_first_person", new byte[0]);
-        if (settingsRegistry.get(Setting.ONLY_RECORDING_PLAYER))
-            restrictions.put("only_recording_player", new byte[0]);
-        if (settingsRegistry.get(Setting.HIDE_COORDINATES))
-            restrictions.put("hide_coordinates", new byte[0]);
-
-        PacketBuffer buf = new PacketBuffer(Unpooled.buffer());
-        for (Map.Entry<String, byte[]> e : restrictions.entrySet()) {
-            byte[] bytes = e.getKey().getBytes();
-            buf.writeByte(bytes.length);
-            buf.writeBytes(bytes);
-            buf.writeByte(1);
-            buf.writeBytes(e.getValue());
-        }
-
-        FMLProxyPacket packet = new FMLProxyPacket(buf, Restrictions.PLUGIN_CHANNEL);
-
-        channel.attr(FMLOutboundHandler.FML_MESSAGETARGET).set(FMLOutboundHandler.OutboundTarget.PLAYER);
-        channel.attr(FMLOutboundHandler.FML_MESSAGETARGETARGS).set(event.player);
-        channel.writeAndFlush(packet).addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
-    }
-}
