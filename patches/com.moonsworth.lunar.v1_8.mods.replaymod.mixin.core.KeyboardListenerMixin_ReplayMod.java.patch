--- com/moonsworth/lunar/v1_8/mods/replaymod/mixin/core/KeyboardListenerMixin_ReplayMod.java
+++ com/moonsworth/lunar/v1_8/mods/replaymod/mixin/core/KeyboardListenerMixin_ReplayMod.java
@@ -1,5 +1,12 @@
 package com.moonsworth.lunar.v1_8.mods.replaymod.mixin.core;
 
+import com.moonsworth.lunar.v1_8.mods.replaymod.core.ReplayMod;
+import com.moonsworth.lunar.v1_8.mods.replaymod.replay.ReplayModReplay;
+
+import org.spongepowered.asm.mixin.Final;
 import org.spongepowered.asm.mixin.Mixin;
+
+import org.spongepowered.asm.mixin.Shadow;
+import org.spongepowered.asm.mixin.Unique;
 import org.spongepowered.asm.mixin.injection.At;
 import org.spongepowered.asm.mixin.injection.Inject;
@@ -10,6 +17,15 @@
 import org.lwjgl.input.Keyboard;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+
 @Mixin(KeyBinding.class)
-public class KeyboardListenerMixin_ReplayMod {
+public abstract class KeyboardListenerMixin_ReplayMod {
+
+    @Shadow @Final public static List<KeyBinding> keybindArray;
+
+    @Unique private static final List<KeyBinding> temporarilyRemoved = new ArrayList<>();
+
     @Inject(method = "onTick", at = @At("HEAD"), cancellable = true)
     private static void beforeKeyBindingTick(CallbackInfo ci) {
@@ -25,3 +41,33 @@
         KeyBindingEventCallback.EVENT.invoker().onKeybindingEvent();
     }
+
+     @Inject(method = "resetKeyBindingArrayAndHash", at = @At("HEAD"))
+     private static void preContextualKeyBindings(CallbackInfo ci) {
+         Set<KeyBinding> onlyInReplay = ReplayMod.instance.getKeyBindingRegistry().getOnlyInReplay();
+         if (ReplayModReplay.instance.getReplayHandler() != null) {
+             // In replay, remove any conflicting key bindings, so that ours are guaranteed in
+             keybindArray.removeIf(keyBinding -> {
+                 for (KeyBinding exclusiveBinding : onlyInReplay) {
+                     if (keyBinding.keyCode == exclusiveBinding.keyCode && keyBinding != exclusiveBinding) {
+                         temporarilyRemoved.add(keyBinding);
+                         return true;
+                     }
+                 }
+                 return false;
+             });
+         } else {
+             // Not in a replay, remove all replay-exclusive keybindings
+             for (KeyBinding keyBinding : onlyInReplay) {
+                 if (keybindArray.remove(keyBinding)) {
+                     temporarilyRemoved.add(keyBinding);
+                 }
+             }
+         }
+     }
+
+     @Inject(method = "resetKeyBindingArrayAndHash", at = @At("RETURN"))
+     private static void postContextualKeyBindings(CallbackInfo ci) {
+         keybindArray.addAll(temporarilyRemoved);
+         temporarilyRemoved.clear();
+     }
 }
